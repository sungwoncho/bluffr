require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe BluffsController, type: :controller do

  let(:user) { create(:user) }
  let!(:match) { create(:match) }
  let!(:match_2) { create(:match) }
  let!(:bluff) { create(:bluff, match: match) }
  let!(:bluff_2) { create(:bluff, match: match_2) }

  before :each do
    sign_in user
  end

  describe "GET index" do
    it "assigns all bluffs of the match as @bluffs" do
      get :index, match_id: 1
      expect(assigns(:bluffs)).to match_array [bluff]
    end

    it "decorates @bluffs" do
      get :index, match_id: 1
      expect(assigns(:bluffs)).to be_decorated
    end

    context "with params[:rule] == 'popular'" do
      it "sorts @bluffs by likes in descending order" do
        bluff_3 = create(:bluff, match: match)
        bluff_4 = create(:bluff, match: match)

        create(:like, bluff: bluff_3, user_id: 1)
        create(:like, bluff: bluff_3, user_id: 2)
        create(:like, bluff: bluff_4)
        bluff_3.update_cached_likes
        bluff_4.update_cached_likes

        get :index, match_id: 1, rule: 'popular'
        expect(assigns(:bluffs)).to eq [bluff_3, bluff_4, bluff]
      end
    end

    context "with params[:rule] == 'newest'" do
      it "sorts @bluffs by created time in descending order" do
        bluff_3 = create(:bluff, match: match, created_at: 1.day.ago)

        get :index, match_id: 1, rule: 'newest'
        expect(assigns(:bluffs)).to eq [bluff, bluff_3]        
      end
    end
  end

  describe "GET show" do

    it "requires login" do
      sign_out user
      get :show, match_id: match, id: bluff
      expect(response).to require_login
    end

    context "when logged in" do
      it "assigns the requested bluff as @bluff" do
        get :show, match_id: match, id: bluff
        expect(assigns(:bluff)).to eq(bluff)
      end
    end
  end

  describe "GET new" do

    it "requires login" do
      sign_out user
      get :new, match_id: match
      expect(response).to require_login
    end

    context "when logged in" do
      it "assigns a new bluff as @bluff" do
        get :new, match_id: match
        expect(assigns(:bluff)).to be_a_new(Bluff)
      end
    end
  end

  describe "GET edit" do

    it "requires login" do
      sign_out user
      get :edit, match_id: match, id: bluff
      expect(response).to require_login
    end

    context "when logged in" do
      it "assigns the requested bluff as @bluff" do
        get :edit, match_id: match, id: bluff
        expect(assigns(:bluff)).to eq(bluff)
      end
    end
  end

  describe "POST create" do

    it "requires login" do
      sign_out user
      post :create, match_id: match, bluff: attributes_for(:bluff)
      expect(response).to require_login
    end

    context "when logged in" do
      describe "with valid params" do
        it "creates a new Bluff" do
          expect {
            post :create, match_id: match, bluff: attributes_for(:bluff)
          }.to change(Bluff, :count).by(1)
        end

        it "assigns a newly created bluff as @bluff" do
          post :create, match_id: match, bluff: attributes_for(:bluff)
          expect(assigns(:bluff)).to be_a(Bluff)
          expect(assigns(:bluff)).to be_persisted
        end

        it "sets @bluff to belong to the current user" do
          post :create, match_id: match, bluff: attributes_for(:bluff)
          expect(assigns(:bluff).author).to eq user
        end

        it "redirects to the created bluff" do
          post :create, match_id: match, bluff: attributes_for(:bluff)
          expect(response).to redirect_to [match, Bluff.last]
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved bluff as @bluff" do
          post :create, match_id: match, bluff: attributes_for(:bluff, statement_1: nil)
          expect(assigns(:bluff)).to be_a_new(Bluff)
        end

        it "re-renders the 'new' template" do
          post :create, match_id: match, bluff: attributes_for(:bluff, statement_1: nil)
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "PUT update" do

    it "requires login" do
      sign_out user
      put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff, statement_1: "changed statement")
      expect(response).to require_login
    end

    context "when logged in" do
      describe "with valid params" do

        it "updates the requested bluff" do
          put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff, statement_1: "changed statement")
          bluff.reload
          expect(bluff.statement_1).to eq "changed statement"
        end

        it "assigns the requested bluff as @bluff" do
          put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff)
          expect(assigns(:bluff)).to eq(bluff)
        end

        it "redirects to the bluff" do
          put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff)
          expect(response).to redirect_to [match, bluff]
        end
      end

      describe "with invalid params" do
        it "assigns the bluff as @bluff" do
          put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff, statement_1: nil)
          expect(assigns(:bluff)).to eq(bluff)
        end

        it "re-renders the 'edit' template" do
          put :update, match_id: match, id: bluff, bluff: attributes_for(:bluff, statement_1: nil)
          expect(response).to render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do

    it "requires login" do
      sign_out user
      delete :destroy, match_id: match, id: bluff
      expect(response).to require_login
    end

    context "when logged in" do
      it "destroys the requested bluff" do
        expect {
          delete :destroy, match_id: match, id: bluff
        }.to change(Bluff, :count).by(-1)
      end

      it "redirects to the bluffs list" do
        delete :destroy, match_id: match, id: bluff
        expect(response).to redirect_to(match_bluffs_url)
      end
    end
  end

end
